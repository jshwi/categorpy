from typing import Any, Optional, List, Dict

from .normalize import NormalizeFile as NormalizeFile


class Ratio:
    exclude: List[str] = ...
    def __init__(self, string1: Any, string2: Any) -> None:
        self.string1: NormalizeFile = ...
        self.string2: NormalizeFile = ...
        self.int: int = ...
    def count_obj(self) -> Dict[str, int]: ...
    @staticmethod
    def length_of_match(word_count: Dict[str, int]) -> List[str]: ...
    def work_percentage(self, match_len: List[str]) -> int: ...
    def word_ratio(self) -> None: ...
    def get_ratio(self) -> None: ...

def match_ratio(magnet: str, exclude: str, cutoff: int) -> None: ...
def match_globs(magnet: str, exclude: str) -> None: ...

class Find:
    def __init__(self, cutoff: int = ..., globs: Optional[Any] = ..., **kwargs: Any) -> None:
        self.types: Dict[str, str] = ...
        self.found: List[str] = ...
        self.rejected: List[str] = ...
        self.cutoff: int = ...
        self.glob: List[str] = ...
    def _get_match(self, key: str, magnet: str, exclude: str) -> None: ...
    def iterate_owned(self, magnet: str) -> str: ...
    def display_tally(self) -> None: ...
    def iterate(self, magnets: List[str]) -> None: ...
