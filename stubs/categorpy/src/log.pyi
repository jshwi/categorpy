import contextlib
import logging
import time

from .locate import APPDIRS as APPDIRS, APPNAME as APPNAME
from typing import Any, Callable, Union, Tuple, Dict


class StreamLogger:
    def __init__(self, name: str = ..., level: str = ..., error: bool = ...) -> None:
        self.logger: logging.Logger = ...
        self.name: str = ...
        self.level: Any = ...
        self._redirector: contextlib.redirect_stdout = ...
    def write(self, msg: str) -> None: ...
    def flush(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

class Time:
    def __init__(self) -> None:
        self.clock: time.clock = ...
        self.elapsed: int = ...
        self.hours: int = ...
        self.mins: int = ...
        self.secs: int = ...
    def reset(self) -> None: ...
    def record(self) -> None: ...

def log_time(proc_msg: str, function: Callable[..., None], **kwargs: Union[Tuple[Any, ...], Dict[str, Any]]) -> Any: ...
def make_logger(name: str = ..., debug: bool = ...) -> None: ...
def get_logger(name: str = ...) -> logging.Logger: ...
def initialize_loggers(debug: bool = ...) -> None: ...
